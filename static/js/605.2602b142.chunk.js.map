{"version":3,"file":"static/js/605.2602b142.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.styled.js","pages/Login/Login.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Title = styled.p`\n  display: block;\n  margin-bottom: 36px;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.4;\n  color: ${({ theme }) => theme.colors.primaryText};\n`;\n\nexport const LoginForm = styled.form`\n  max-width: 452px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 28px 24px;\n  background-color: ${({ theme }) => theme.colors.primary};\n  border-radius: 15px;\n  box-shadow: 0px 7px 23px rgba(0, 0, 0, 0.05);\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 24px;\n`;\n\nexport const TextLabel = styled.span`\n  display: block;\n  margin-bottom: 5.5px;\n  font-size: 14px;\n  line-height: 1.4;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  padding: 15px 20px;\n  width: 100%;\n  font-size: 14px;\n  line-height: 1.4;\n  background-color: ${({ theme }) => theme.colors.primary};\n  border: 1px solid ${({ theme }) => theme.colors.inputBorder};\n  border-radius: 15px;\n  outline: none;\n\n  &::placeholder {\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.4;\n    color: ${({ theme }) => theme.colors.secondaryText};\n  }\n\n  &:focus {\n    border-color: ${({ theme }) => theme.colors.accent};\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 22px;\n  padding: 14px;\n  width: 100%;\n  font-weight: 700;\n  font-size: 10px;\n  line-height: 1.5;\n  text-transform: uppercase;\n  color: ${({ theme }) => theme.colors.primary};\n  background-color: ${({ theme }) => theme.colors.accent};\n  border: 1px solid ${({ theme }) => theme.colors.accent};\n  border-radius: 12px;\n  transition: background-color\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`},\n    color ${({ theme }) => `${theme.duration} ${theme.timingFunction}`};\n  cursor: pointer;\n\n  &:hover:not(:disabled) {\n    color: ${({ theme }) => theme.colors.accent};\n    background-color: ${({ theme }) => theme.colors.primary};\n  }\n\n  &:disabled {\n    opacity: 0.8;\n  }\n`;\n\nexport const Text = styled.span`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 4px;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.4;\n  text-align: center;\n  color: ${({ theme }) => theme.colors.secondaryText};\n`;\n\nexport const SignInLink = styled(Link)`\n  position: relative;\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.accent};\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: 1.5px;\n    left: 0;\n    display: block;\n    height: 1px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.accent};\n    opacity: 0;\n    transition: opacity\n      ${({ theme }) => `${theme.duration} ${theme.timingFunction}`};\n  }\n\n  &:hover::after {\n    opacity: 1;\n  }\n`;\n\nexport const ErrorText = styled.span`\n  padding: 2px;\n  font-size: 12px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.errorText};\n`;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'react-hot-toast';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { clearError } from 'redux/auth/sliceAuth';\nimport { logIn } from 'redux/auth/operationsAuth';\nimport { useAuth } from 'hooks';\nimport { Loader } from 'components/Loader';\nimport { validatePattern, errorMessage } from 'constants';\nimport * as S from './LoginForm.styled';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .max(255)\n    .matches(validatePattern.email, errorMessage.email)\n    .required(),\n  password: yup.string().min(8).max(255).required(),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: initialValues,\n    resolver: yupResolver(schema),\n  });\n  const dispatch = useDispatch();\n  const { isLoading, error: authError } = useAuth();\n\n  useEffect(() => {\n    if (authError) {\n      toast.error(\n        'От халепа! Можливо, ваш пароль або адреса електронної пошти введено неправильно.'\n      );\n      dispatch(clearError());\n    }\n  }, [authError, dispatch]);\n\n  const onSubmit = data => {\n    dispatch(logIn(data));\n    reset();\n  };\n\n  return (\n    <S.LoginForm\n      autoComplete=\"off\"\n      noValidate\n      onSubmit={handleSubmit(data => {\n        onSubmit(data);\n      })}\n    >\n      <S.Title>Введіть адресу електронної пошти та пароль</S.Title>\n\n      <S.Label>\n        <S.TextLabel>Електронна пошта</S.TextLabel>\n        <S.Input\n          {...register('email')}\n          type=\"email\"\n          placeholder=\"Ваша електронна пошта\"\n        />\n        {errors.email && <S.ErrorText>{errors.email?.message}</S.ErrorText>}\n      </S.Label>\n\n      <S.Label>\n        <S.TextLabel>Пароль</S.TextLabel>\n        <S.Input\n          {...register('password')}\n          type=\"password\"\n          placeholder=\"Ваш пароль\"\n        />\n        {errors.password && (\n          <S.ErrorText>{errors.password?.message}</S.ErrorText>\n        )}\n      </S.Label>\n\n      <S.Button type=\"submit\" disabled={isLoading}>\n        {isLoading ? <Loader width=\"15\" height=\"15\" color=\"#fff\" /> : 'Увійти'}\n      </S.Button>\n\n      <S.Text>\n        Немає облікового запису?\n        <S.SignInLink to=\"/register\">Увійти</S.SignInLink>\n      </S.Text>\n    </S.LoginForm>\n  );\n};\n","import styled from 'styled-components';\nimport backgroundImg from 'images/background.jpg';\n\nexport const Section = styled.section`\n  background-image: url(${backgroundImg});\n  display: flex;\n  flex-wrap: nowrap;\n  flex-direction: column;\n  align-items: center;\n  padding: 24px;\n\n  background-size: cover;\n  background-position: center center;\n  border-radius: 15px;\n  box-shadow: rgba(0, 0, 0, 0.12) 4px 1px 4px, rgba(0, 0, 0, 0.06) 0px 4px 4px,\n    rgba(0, 0, 0, 0.16) 1px 4px 6px;\n  height: 50vw;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 12px;\n    right: 12px;\n    z-index: -1;\n    display: block;\n\n    background-image: url(${backgroundImg});\n    background-size: cover;\n    background-position: center;\n    border-radius: 15px;\n\n    @media screen and (min-width: ${({ theme }) => theme.breakpoint}) {\n      top: 24px;\n      right: 24px;\n      padding-left: 48px;\n      padding-right: 48px;\n    }\n  }\n`;\n\nexport const Title = styled.h1`\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 24px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1.3;\n  color: ${({ theme }) => theme.colors.primary};\n`;\n","import { LoginForm } from 'components/LoginForm';\nimport * as S from './Login.styled';\n\nconst Login = () => (\n  <S.Section>\n    <S.Title>Register Form</S.Title>\n    <S.Text>Вітаю!</S.Text>\n    <LoginForm />\n  </S.Section>\n);\n\nexport default Login;\n"],"names":["Title","styled","theme","colors","primaryText","LoginForm","primary","Label","TextLabel","Input","inputBorder","secondaryText","accent","Button","duration","timingFunction","Text","SignInLink","Link","ErrorText","errorText","schema","yup","shape","email","max","matches","validatePattern","errorMessage","required","password","min","initialValues","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","useAuth","isLoading","authError","error","useEffect","toast","clearError","autoComplete","noValidate","onSubmit","data","logIn","type","placeholder","message","disabled","Loader","width","height","color","to","Section","backgroundImg","breakpoint"],"sourceRoot":""}